const { Pool } = require('pg');
const dotenv = require('dotenv');
dotenv.config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 10,
});

async function testMomentumStrategy() {
  try {
    console.log('üß™ Ê∏¨Ë©¶ momentum Á≠ñÁï•...');
    const epoch = 419130;
    
    // Áç≤ÂèñË©≤Â±ÄÁöÑÂü∫Êú¨‰ø°ÊÅØ
    const currentRound = await pool.query(`
      SELECT result, up_bet_amount, down_bet_amount, total_bet_amount, lock_price, close_price
      FROM round WHERE epoch = $1
    `, [epoch]);
    
    if (currentRound.rows.length === 0) {
      console.log('‚ùå Êâæ‰∏çÂà∞Â±ÄÊ¨°Ë≥áÊñô');
      return;
    }
    
    const round = currentRound.rows[0];
    console.log('‚úÖ Áï∂ÂâçÂ±ÄÊ¨°Ë≥áÊñô:', round);
    
    // ÂàÜÊûêÊúÄËøë5Â±ÄÁöÑË∂®Âã¢Êï∏Êìö
    const trendAnalysis = await pool.query(`
      SELECT 
        epoch,
        result,
        up_bet_amount,
        down_bet_amount,
        total_bet_amount,
        (up_bet_amount::float / NULLIF(total_bet_amount::float, 0)) as up_ratio,
        CASE WHEN close_price > 0 AND lock_price > 0 
             THEN (close_price::float - lock_price::float) / lock_price::float 
             ELSE 0 END as price_change
      FROM round 
      WHERE epoch BETWEEN $1 AND $2 AND result IS NOT NULL
      ORDER BY epoch DESC
    `, [epoch - 5, epoch - 1]);
    
    console.log('‚úÖ Ë∂®Âã¢ÂàÜÊûêË≥áÊñôÁ≠ÜÊï∏:', trendAnalysis.rows.length);
    if (trendAnalysis.rows.length > 0) {
      console.log('Ââç3Á≠ÜË∂®Âã¢Ë≥áÊñô:', trendAnalysis.rows.slice(0, 3));
      
      // Ê∏¨Ë©¶ÂãïÈáèË®àÁÆóÈÇèËºØ
      const prediction = calculateMomentumPrediction(trendAnalysis.rows, round);
      console.log('üéØ ÂãïÈáèÈ†êÊ∏¨ÁµêÊûú:', prediction);
      console.log('üìä ÂØ¶ÈöõÁµêÊûú:', round.result);
      console.log('‚úÖ È†êÊ∏¨Ê≠£Á¢∫:', prediction === round.result);
    }
    
  } catch (error) {
    console.error('‚ùå ÈåØË™§:', error.message);
    console.error(error.stack);
  } finally {
    await pool.end();
  }
}

function calculateMomentumPrediction(historicalData, currentRound) {
  let upScore = 0;
  let downScore = 0;
  
  console.log('üîç ÈñãÂßãÂãïÈáèÂàÜÊûê...');

  // ÁâπÂæµ1: ÈÄ£Á∫åË∂ãÂäøÂàÜÊûê
  const recentResults = historicalData.map(r => r.result).slice(0, 3);
  console.log('ËøëÊúüÁµêÊûú:', recentResults);
  
  const upStreak = recentResults.filter(r => r === 'UP').length;
  const downStreak = recentResults.filter(r => r === 'DOWN').length;
  
  console.log(`UPÈÄ£Âãù: ${upStreak}, DOWNÈÄ£Âãù: ${downStreak}`);
  
  // Ë∂®Âã¢Âª∂Á∫å vs Ë∂®Âã¢ÂèçËΩâÂà§Êñ∑
  if (upStreak >= 2) {
    if (upStreak >= 3) {
      downScore += 2; // Âº∑ÂèçËΩâ‰ø°Ëôü
      console.log('Âº∑ÂèçËΩâ‰ø°Ëôü (DOWN +2)');
    } else {
      upScore += 1; // Âº±Âª∂Á∫å‰ø°Ëôü
      console.log('Âº±Âª∂Á∫å‰ø°Ëôü (UP +1)');
    }
  }
  if (downStreak >= 2) {
    if (downStreak >= 3) {
      upScore += 2;
      console.log('Âº∑ÂèçËΩâ‰ø°Ëôü (UP +2)');
    } else {
      downScore += 1;
      console.log('Âº±Âª∂Á∫å‰ø°Ëôü (DOWN +1)');
    }
  }

  // ÁâπÂæµ2: Ë≥áÈáëÊµÅÂãïÂàÜÊûê
  const currentUpRatio = parseFloat(currentRound.up_bet_amount) / parseFloat(currentRound.total_bet_amount);
  const historicalUpRatios = historicalData.map(r => parseFloat(r.up_ratio)).filter(r => !isNaN(r));
  
  console.log(`Áï∂ÂâçUPÊØî‰æã: ${currentUpRatio.toFixed(3)}`);
  
  if (historicalUpRatios.length > 0) {
    const avgHistoricalUpRatio = historicalUpRatios.reduce((a, b) => a + b) / historicalUpRatios.length;
    console.log(`Ê≠∑Âè≤Âπ≥ÂùáUPÊØî‰æã: ${avgHistoricalUpRatio.toFixed(3)}`);
    
    const ratioDiff = currentUpRatio - avgHistoricalUpRatio;
    console.log(`ÊØî‰æãÂ∑ÆÁï∞: ${ratioDiff.toFixed(3)}`);
    
    if (Math.abs(ratioDiff) > 0.1) {
      if (ratioDiff > 0) {
        upScore += 2;
        console.log('Ë≥áÈáëÊµÅÂêëUP (UP +2)');
      } else {
        downScore += 2;
        console.log('Ë≥áÈáëÊµÅÂêëDOWN (DOWN +2)');
      }
    }
  }

  console.log(`üéØ ÊúÄÁµÇÂæóÂàÜ - UP: ${upScore}, DOWN: ${downScore}`);
  
  // Á∂úÂêàÊ±∫Á≠ñ - Á∏ΩÊòØÁµ¶Âá∫ÊòéÁ¢∫È†êÊ∏¨
  const scoreDiff = upScore - downScore;
  
  // Â¶ÇÊûúÂæóÂàÜÁõ∏ÂêåÔºå‰ΩøÁî®Ë≥áÈáëÊµÅÂêë‰ΩúÁÇ∫Ê±∫ÂÆöÊÄßÂõ†Á¥†
  if (scoreDiff === 0) {
    const prediction = currentUpRatio > 0.5 ? 'UP' : 'DOWN';
    console.log(`‚öñÔ∏è  ÂæóÂàÜÁõ∏ÂêåÔºå‰ΩøÁî®Ë≥áÈáëÊµÅÂêëÊ±∫ÂÆö: ${prediction}`);
    return prediction;
  }
  
  const prediction = scoreDiff > 0 ? 'UP' : 'DOWN';
  console.log(`‚úÖ È†êÊ∏¨: ${prediction}`);
  return prediction;
}

function calculateVolatility(values) {
  if (values.length < 2) return 0;
  
  const mean = values.reduce((a, b) => a + b) / values.length;
  const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / values.length;
  return Math.sqrt(variance);
}

testMomentumStrategy();